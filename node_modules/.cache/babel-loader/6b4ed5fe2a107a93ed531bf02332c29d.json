{"ast":null,"code":"var _jsxFileName = \"/Users/joseoliva/Documents/challenge/challenge-flat/src/context/userContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UsersContext = /*#__PURE__*/createContext();\n\nconst UsersProvider = props => {\n  _s();\n\n  const [user, setUser] = useState([]);\n  const [userNotExist, setUserNotExist] = useState(false);\n  const [repositories, setRepositories] = useState([]);\n  const [userActive, setUserActive] = useState(false);\n  const [searchUser, setSearchUser] = useState([]);\n  useEffect(() => {\n    if (searchUser.length > 0) {\n      const getUsers = async () => {\n        // Get detail for the selected user\n        await axios.get(`https://api.github.com/users/${searchUser}`).then(response => {\n          setUserNotExist(false);\n          setUser(response.data);\n        }).catch(() => {\n          setUserNotExist(true);\n          setUser([]);\n          console.warn('user does not exist');\n        });\n      };\n\n      getUsers();\n    }\n  }, [searchUser]);\n  return /*#__PURE__*/_jsxDEV(UsersContext.Provider, {\n    value: {\n      user,\n      userActive,\n      repositories,\n      userNotExist,\n      setUser,\n      setSearchUser,\n      setUserActive\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UsersProvider, \"a5rJOtsxmgANcrh8ymiK7OLTluM=\");\n\n_c = UsersProvider;\nexport default UsersProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersProvider\");","map":{"version":3,"sources":["/Users/joseoliva/Documents/challenge/challenge-flat/src/context/userContext.js"],"names":["React","createContext","useState","useEffect","axios","UsersContext","UsersProvider","props","user","setUser","userNotExist","setUserNotExist","repositories","setRepositories","userActive","setUserActive","searchUser","setSearchUser","length","getUsers","get","then","response","data","catch","console","warn","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAlC;;AAEP,MAAMK,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;AACvB,YAAMC,QAAQ,GAAG,YAAW;AACxB;AACA,cAAMf,KAAK,CAACgB,GAAN,CAAW,gCAA+BJ,UAAW,EAArD,EACLK,IADK,CACCC,QAAD,IAAc;AAChBX,UAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,UAAAA,OAAO,CAACa,QAAQ,CAACC,IAAV,CAAP;AACH,SAJK,EAKLC,KALK,CAKC,MAAM;AACTb,UAAAA,eAAe,CAAC,IAAD,CAAf;AACAF,UAAAA,OAAO,CAAC,EAAD,CAAP;AACAgB,UAAAA,OAAO,CAACC,IAAR,CAAa,qBAAb;AACH,SATK,CAAN;AAUH,OAZD;;AAaAP,MAAAA,QAAQ;AACX;AACJ,GAjBQ,EAiBN,CAACH,UAAD,CAjBM,CAAT;AAmBA,sBACI,QAAC,YAAD,CAAc,QAAd;AACI,IAAA,KAAK,EAAE;AACHR,MAAAA,IADG;AAEHM,MAAAA,UAFG;AAGHF,MAAAA,YAHG;AAIHF,MAAAA,YAJG;AAKHD,MAAAA,OALG;AAMHQ,MAAAA,aANG;AAOHF,MAAAA;AAPG,KADX;AAAA,cAUKR,KAAK,CAACoB;AAVX;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAxCD;;GAAMrB,a;;KAAAA,a;AA0CN,eAAeA,aAAf","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nexport const UsersContext = createContext()\n\nconst UsersProvider = (props) => {\n    const [user, setUser] = useState([])\n    const [userNotExist, setUserNotExist] = useState(false)\n    const [repositories, setRepositories] = useState([])\n    const [userActive, setUserActive] = useState(false)\n    const [searchUser, setSearchUser] = useState([])\n\n    useEffect(() => {\n        if (searchUser.length > 0) {\n            const getUsers = async() => {\n                // Get detail for the selected user\n                await axios.get(`https://api.github.com/users/${searchUser}`)\n                .then((response) => {\n                    setUserNotExist(false)\n                    setUser(response.data)\n                })\n                .catch(() => {\n                    setUserNotExist(true)\n                    setUser([])\n                    console.warn('user does not exist')\n                })\n            }\n            getUsers()\n        }\n    }, [searchUser])\n\n    return (\n        <UsersContext.Provider\n            value={{\n                user,\n                userActive,\n                repositories,\n                userNotExist,\n                setUser,\n                setSearchUser,\n                setUserActive\n            }}>\n            {props.children}\n        </UsersContext.Provider>\n    )\n}\n\nexport default UsersProvider\n"]},"metadata":{},"sourceType":"module"}