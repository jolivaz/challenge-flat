{"ast":null,"code":"var _jsxFileName = \"/Users/joseoliva/Documents/challenge/challenge-flat/src/context/repositoriesContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, createContext, useState, useEffect } from \"react\";\nimport { UsersContext } from './userContext';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RepositoriesContext = /*#__PURE__*/createContext();\n\nconst RepositoriesProvider = props => {\n  _s();\n\n  const {\n    user,\n    userActive\n  } = useContext(UsersContext);\n  const [loaderActive, setLoaderActive] = useState(false);\n  const [repositories, setRepositories] = useState([]);\n  const [repositoryActive, setRepositoryActive] = useState([]);\n  useEffect(() => {\n    // Get list of repositories available for the selected user\n    const getRepositories = async () => {\n      setLoaderActive(true);\n      const dataRepositories = await axios.get(`https://api.github.com/users/${user.login}/repos`);\n\n      if (dataRepositories) {\n        setRepositories(dataRepositories.data);\n        setTimeout(() => {\n          setLoaderActive(false);\n        }, 500);\n      } else {\n        console.warn('repositories does not exist');\n      }\n    };\n\n    getRepositories();\n  }, [userActive]);\n  return /*#__PURE__*/_jsxDEV(RepositoriesContext.Provider, {\n    value: {\n      repositories,\n      repositoryActive,\n      setRepositoryActive,\n      loaderActive\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RepositoriesProvider, \"8Kc28Ksaz1BNBxusghvUHnBXVTA=\");\n\n_c = RepositoriesProvider;\nexport default RepositoriesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"RepositoriesProvider\");","map":{"version":3,"sources":["/Users/joseoliva/Documents/challenge/challenge-flat/src/context/repositoriesContext.js"],"names":["React","useContext","createContext","useState","useEffect","UsersContext","axios","RepositoriesContext","RepositoriesProvider","props","user","userActive","loaderActive","setLoaderActive","repositories","setRepositories","repositoryActive","setRepositoryActive","getRepositories","dataRepositories","get","login","data","setTimeout","console","warn","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,mBAAmB,gBAAGL,aAAa,EAAzC;;AAEP,MAAMM,oBAAoB,GAAIC,KAAD,IAAW;AAAA;;AACpC,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAqBV,UAAU,CAACI,YAAD,CAArC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,EAAD,CAAxD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMc,eAAe,GAAG,YAAW;AAC/BL,MAAAA,eAAe,CAAC,IAAD,CAAf;AACA,YAAMM,gBAAgB,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAW,gCAA+BV,IAAI,CAACW,KAAM,QAArD,CAA/B;;AACA,UAAIF,gBAAJ,EAAsB;AAClBJ,QAAAA,eAAe,CAACI,gBAAgB,CAACG,IAAlB,CAAf;AACAC,QAAAA,UAAU,CAAC,MAAM;AACbV,UAAAA,eAAe,CAAC,KAAD,CAAf;AACH,SAFS,EAEP,GAFO,CAAV;AAGH,OALD,MAKO;AACHW,QAAAA,OAAO,CAACC,IAAR,CAAa,6BAAb;AACH;AACJ,KAXD;;AAYAP,IAAAA,eAAe;AAClB,GAfQ,EAeN,CAACP,UAAD,CAfM,CAAT;AAiBA,sBACI,QAAC,mBAAD,CAAqB,QAArB;AACI,IAAA,KAAK,EAAE;AACHG,MAAAA,YADG;AAEHE,MAAAA,gBAFG;AAGHC,MAAAA,mBAHG;AAIHL,MAAAA;AAJG,KADX;AAAA,cAOKH,KAAK,CAACiB;AAPX;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAlCD;;GAAMlB,oB;;KAAAA,oB;AAoCN,eAAeA,oBAAf","sourcesContent":["import React, { useContext, createContext, useState, useEffect } from \"react\"\nimport { UsersContext } from './userContext'\nimport axios from \"axios\"\n\nexport const RepositoriesContext = createContext()\n\nconst RepositoriesProvider = (props) => {\n    const {user, userActive} = useContext(UsersContext)\n    const [loaderActive, setLoaderActive] = useState(false)\n    const [repositories, setRepositories] = useState([])\n    const [repositoryActive, setRepositoryActive] = useState([])\n\n    useEffect(() => {\n        // Get list of repositories available for the selected user\n        const getRepositories = async() => {\n            setLoaderActive(true)\n            const dataRepositories = await axios.get(`https://api.github.com/users/${user.login}/repos`)\n            if (dataRepositories) {\n                setRepositories(dataRepositories.data)\n                setTimeout(() => {\n                    setLoaderActive(false)\n                }, 500)\n            } else {\n                console.warn('repositories does not exist')\n            } \n        }\n        getRepositories()\n    }, [userActive])\n\n    return (\n        <RepositoriesContext.Provider\n            value={{\n                repositories,\n                repositoryActive,\n                setRepositoryActive,\n                loaderActive\n            }}>\n            {props.children}\n        </RepositoriesContext.Provider>\n    )\n}\n\nexport default RepositoriesProvider\n"]},"metadata":{},"sourceType":"module"}