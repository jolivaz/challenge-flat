{"ast":null,"code":"var _jsxFileName = \"/Users/joseoliva/Documents/challenge/challenge-flat/src/context/branchesContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, createContext, useState, useEffect } from \"react\";\nimport { RepositoriesContext } from './repositoriesContext';\nimport { UsersContext } from './userContext';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BranchesContext = /*#__PURE__*/createContext();\n\nconst BranchesProvider = props => {\n  _s();\n\n  const {\n    repositoryActive\n  } = useContext(RepositoriesContext);\n  const {\n    user\n  } = useContext(UsersContext);\n  const [branches, setBranches] = useState([]);\n  useEffect(() => {\n    // Get list of branches available for the selected project\n    const getBranches = async () => {\n      const dataBranches = await axios.get(`https://api.github.com/repos/${user.login}/${repositoryActive}/branches`);\n\n      if (dataBranches) {\n        setBranches(dataBranches.data);\n      } else {\n        console.warn('Branches does not exist');\n      }\n    };\n\n    getBranches();\n  }, [repositoryActive]);\n  return /*#__PURE__*/_jsxDEV(BranchesContext.Provider, {\n    value: {\n      branches\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BranchesProvider, \"tGkdT7T7d2Jh/vPOFn2mN0JAZGI=\");\n\n_c = BranchesProvider;\nexport default BranchesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchesProvider\");","map":{"version":3,"sources":["/Users/joseoliva/Documents/challenge/challenge-flat/src/context/branchesContext.js"],"names":["React","useContext","createContext","useState","useEffect","RepositoriesContext","UsersContext","axios","BranchesContext","BranchesProvider","props","repositoryActive","user","branches","setBranches","getBranches","dataBranches","get","login","data","console","warn","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,eAAe,gBAAGN,aAAa,EAArC;;AAEP,MAAMO,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM;AAACC,IAAAA;AAAD,MAAqBV,UAAU,CAACI,mBAAD,CAArC;AACA,QAAM;AAACO,IAAAA;AAAD,MAASX,UAAU,CAACK,YAAD,CAAzB;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMW,WAAW,GAAG,YAAW;AAC3B,YAAMC,YAAY,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,gCAA+BL,IAAI,CAACM,KAAM,IAAGP,gBAAiB,WAAzE,CAA3B;;AACA,UAAIK,YAAJ,EAAkB;AACdF,QAAAA,WAAW,CAACE,YAAY,CAACG,IAAd,CAAX;AACH,OAFD,MAEO;AACHC,QAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb;AACH;AACJ,KAPD;;AAQAN,IAAAA,WAAW;AACd,GAXQ,EAWN,CAACJ,gBAAD,CAXM,CAAT;AAaA,sBACI,QAAC,eAAD,CAAiB,QAAjB;AACI,IAAA,KAAK,EAAE;AACHE,MAAAA;AADG,KADX;AAAA,cAIKH,KAAK,CAACY;AAJX;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA1BD;;GAAMb,gB;;KAAAA,gB;AA4BN,eAAeA,gBAAf","sourcesContent":["import React, { useContext, createContext, useState, useEffect } from \"react\"\nimport { RepositoriesContext } from './repositoriesContext'\nimport { UsersContext } from './userContext'\nimport axios from \"axios\"\n\nexport const BranchesContext = createContext()\n\nconst BranchesProvider = (props) => {\n    const {repositoryActive} = useContext(RepositoriesContext)\n    const {user} = useContext(UsersContext)\n    const [branches, setBranches] = useState([])\n\n    useEffect(() => {\n        // Get list of branches available for the selected project\n        const getBranches = async() => {\n            const dataBranches = await axios.get(`https://api.github.com/repos/${user.login}/${repositoryActive}/branches`)\n            if (dataBranches) {\n                setBranches(dataBranches.data)\n            } else {\n                console.warn('Branches does not exist')\n            } \n        }\n        getBranches()\n    }, [repositoryActive])\n\n    return (\n        <BranchesContext.Provider\n            value={{\n                branches\n            }}>\n            {props.children}\n        </BranchesContext.Provider>\n    )\n}\n\nexport default BranchesProvider\n"]},"metadata":{},"sourceType":"module"}